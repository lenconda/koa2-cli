#!/usr/bin/env node

var program = require('commander');
var exec = require('child_process').exec;
var path = require('path');
var sortedObject = require('sorted-object');

// import utils
var utils = require('../utils');

// import package.json
var package = require('../package');

// define program params and usages
program
  .allowUnknownOption() // allow unknown options
  .version(package.version)
  .usage('[options] [project_name(dir)]')
  .option('-t, --typescript', 'add typescript support')
  .option('-f, --force', 'force generate in an empty directory')
  .parse(process.argv);

// main function
main();

/**
 * generate application
 *
 * @param {String} appName
 * @param {String} path
 */
function generate(appName, path) {
  var pkgInfo = program.typescript ?
    require('../templates/template2/package.predefined') :
    require('../templates/template1/package.predefined');
  pkgInfo.name = appName;
  pkgInfo.dependencies = sortedObject(pkgInfo.dependencies);
  if (program.typescript) {
    // read files
    // /
    let appTs = utils.loadFile('templates/template2/app.ts');
    var config = utils.loadFile('templates/template2/config.ts');
    var tsconfig = utils.loadFile('templates/template2/tsconfig.json');
    var tslint = utils.loadFile('templates/template2/tslint.json');
    // /app/controllers
    var index = utils.loadFile('templates/template2/app/controllers/index.ts');
    var users = utils.loadFile('templates/template2/app/controllers/users.ts');
    var gitignore = utils.loadFile('templates/gitignore');

    utils.mkdirP(path, function () {
      utils.mkdirP(path + '/app', function () {
        utils.mkdirP(path + '/app/middlewares');
        utils.mkdirP(path + '/app/services');
        utils.mkdirP(path + '/app/controllers', function () {
          utils.writeToFile(path + '/app/controllers/index.ts', index);
          utils.writeToFile(path + '/app/controllers/users.ts', users);
        });
      });
      utils.mkdirP(path + '/interfaces');
      utils.writeToFile(path + '/app.ts', appTs);
      utils.writeToFile(path + '/config.ts', config);
      utils.writeToFile(path + '/tsconfig.json', tsconfig);
      utils.writeToFile(path + '/tslint.json', tslint);
      utils.writeToFile(path + '/.gitignore', gitignore);

      // write to /package.json
      utils.writeToFile(path + '/package.json', JSON.stringify(pkgInfo, null, 2), function () {
        // install dependencies
        exec('cd ' + path + ' && npm install', function (error, stdout, stderr) {
          if (error) throw new Error(error);
          console.log('    [√] ' + stdout);
          utils.finished(appName, program.typescript);
        });
      });
    });
  } else {
    // read files
    var appJs = utils.loadFile('templates/template1/app.js');
    var www = utils.loadFile('templates/template1/www');
    var index = utils.loadFile('templates/template1/index.js');
    var users = utils.loadFile('templates/template1/users.js');
    var gitignore = utils.loadFile('templates/gitignore');

    utils.mkdirP(path, function () {
      utils.mkdirP(path + '/bin', function () {
        utils.writeToFile(path + '/bin/www', www, 0755);
      });
      utils.mkdirP(path + '/routes', function () {
        utils.writeToFile(path + '/routes/index.js', index);
        utils.writeToFile(path + '/routes/users.js', users);
      });
      utils.writeToFile(path + '/app.js', appJs);
      utils.writeToFile(path + '/.gitignore', gitignore);

      // write to /package.json
      utils.writeToFile(path + '/package.json', JSON.stringify(pkgInfo, null, 2), function () {
        // install dependencies
        exec('cd ' + path + ' && npm install', function (error, stdout, stderr) {
          if (error) throw new Error(error);
          console.log('    [√] ' + stdout);
          utils.finished(appName, program.typescript);
        });
      });
    });
  }
}

/**
 * main function
 */
function main() {
  // define destination path
  var destPath = program.args[0] || '.';

  // define app name
  var appName = path.basename(path.resolve(destPath));

  // generate application files
  utils.isEmptyDir(destPath, function (empty) {
    if (empty || program.force) {
      generate(appName, destPath);
    } else {
      utils.mkPrompt('The destination directory is not empty, continue? [y/N] ', function (input) {
        if (input) {
          process.stdin.destroy();
          generate(appName, destPath);
        } else {
          console.error('Project not generated!');
          process.exit(1);
        }
      });
    }
  });
}